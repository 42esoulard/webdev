---------------------------
    ORGANIZING JS CODE 
---------------------------


    Plain Old JavaScript Objects and Object Constructors
    Factory Functions and the Module Pattern
    Classes
    ES6 Modules

-----------------------
        OBJECTS 
-----------------------

INSTANTIATE, ACCESS, DOS AND DONT :
    const myObject = {
    property: 'Value!',
    otherProperty: 77,
    "obnoxious property": function() {
        // do stuff!
      }
    }

    // dot notation
    myObject.property // 'Value!'

    // bracket notation
    myObject["obnoxious property"] // [Function]

    const variable = 'property'
    myObject.variable // this gives us 'undefined' because it's looking for a property named 'variable' in our object
    myObject[variable] // this is equivalent to myObject['property'] and returns 'Value!'

As much as possible, group related variables in an object for cleaner code.

For an object which will be instanciated multiple times, create a constructor function:
    function Player(name, marker) {
        this.name = name
        this.marker = marker
        this.sayName = function() {
            console.log(name)
        }
    }

    const player = new Player('steve', 'X')
    console.log(player.name) // 'steve'
    player.sayName() //'steve

It is almost always best to return things rather than putting console.log() directly into the function

------> Object prototype:
All object inherit from their prototype
 __proto__ use is not generally recommended. It is an attribute of every
 instance of a prototype, and it points to the parent prototype.

Prefer Object.create(parent.prototype)

We can edit an object prototype by accessing its prototype:
    function PrintStuff (myDocuments) {
        this.documents = myDocuments;
    }
    // We add the print () method to PrintStuff prototype property so that other instances (objects) can inherit it:
    PrintStuff.prototype.print = function () {
        console.log(this.documents);
    }
    //Now if we instanciate a PrintStuff, it will have the print() function

Objects also have a constructor property pointing to their constructor:
    var myObj = new Object ();
    console.log(myObj.constructor); // Object()
By default if not specified, the object inherits from Object and has Object()
as its prototype attribute
    var userAccount = {name: “Mike”} //userAccount.prototype is Object()
But
    function Account () {}
    var userAccount = new Account () //userAccount.prototype is Account()

PROTOTYPES INHERITING FROM OTHERS:
    function Plant () {
        this.country = "Mexico";
        this.isOrganic = true;
    }

    // Add the showNameAndColor method to the Plant prototype property
    Plant.prototype.showNameAndColor =  function () {
        console.log("I am a " + this.name + " and my color is " + this.color);
     }

    // Add the amIOrganic method to the Plant prototype property
    Plant.prototype.amIOrganic = function () {
        if (this.isOrganic)
            console.log("I am organic, Baby!");
    }

    function Fruit (fruitName, fruitColor) {
        this.name = fruitName;
        this.color = fruitColor;
    }

    // Set the Fruit's prototype to Plant's constructor, thus inheriting all of Plant.prototype methods and properties.
    Fruit.prototype = new Plant ();

    // Creates a new object, aBanana, with the Fruit constructor
    var aBanana = new Fruit ("Banana", "Yellow");

    // Here, aBanana uses the name property from the aBanana object prototype, which is Fruit.prototype:
    console.log(aBanana.name); // Banana

    // Uses the showNameAndColor method from the Fruit object prototype, which is Plant.prototype. The aBanana object inherits all the properties and methods from both the Plant and Fruit functions.
    console.log(aBanana.showNameAndColor()); // I am a Banana and my color is yellow.

THE PROTOTYPE CHAIN:
If an attribute isn't found in a child, it's looked up 
in its prototype. If it still isn't, it's looked up in the 
prototype's prototype. And if it isn't... this goes on
all the way up the family tree and if it isn't found,
undefined is returned. 
Parent properties can be overwritten in children.

OBJECT PROPERTIES INHERITED BY ALL OBJECTS:
All objects in JavaScript inherit properties and methods from Object.prototype:
    constructor, 
    hasOwnProperty (), 
    isPrototypeOf (), 
    propertyIsEnumerable (), 
    toLocaleString (), 
    toString (), 
    valueOf ()

WHAT ABOUT THIS:
No matter where the method is found: in an object or its prototype. 
In a method call, this is always the object before the dot.

ITERATING ON OBJECT ATTRIBUTES:
Object.keys(myobject): iterates only on object's own keys
for...in: iterates on inherited properties too!
But Object() inherited properties are not listed.
    let animal = {
        eats: true
    };

    let rabbit = {
        jumps: true,
        __proto__: animal
    };

    // Object.keys only returns own keys
    alert(Object.keys(rabbit)); // jumps

    // for..in loops over both own and inherited keys
    for(let prop in rabbit) alert(prop); // jumps, then eats

Check if obj has own property (not inherited):
obj.hasOwnProperty(key): it returns true if obj has its own (not inherited) property named key

/!\ Prefer to define functions of an object on its prototype
rather than in its constructor, for optimization reasons to save memory.
 
/!\ Use Object.create to set an object's prototype:
    function Student() {
    }

    Student.prototype.sayName = function() {
        console.log(this.name)
    }

    function EighthGrader(name) {
        this.name = name
        this.grade = 8
    }

    EighthGrader.prototype = Object.create(Student.prototype)

    const carl = new EighthGrader("carl")
    carl.sayName() // console.logs "carl"
    carl.grade // 8
DO NOT DO EighthGrader.prototype = Student.prototype


-----------------------------------------------------------------------------------

-----------------------
      CONSTRUCTOR 
-----------------------

Instead of having to use new Constructor(),
use a Factory Function, a function which returns
a new object:
    const personFactory = (name, age) => {
        return { name, age, sayHello };
    };

This line directly returns an object where this.name=name, etc:
    return {name, age, sayHello}
To print variable names + values:
    console.log({name, color, number, food})

-----------------------
         SCOPE 
-----------------------
scope === which variable i can access
context === what 'this' refers to

Factory functions: we can only access what they return.
So the variables and functions inside are accessible to whatever the return
tries to access, but from the outside we can't.
They allow us to create private variables:
    const counterCreator = () => {
    let count = 0;//count is private
    return () => {
        console.log(count);//any instance of counterCreator can access count
        count++;
     };
    };

    const counter = counterCreator();
    counter(); // 0
    counter(); // 1
    counter.count //ERROR, not accessible from the outside

Private functions are functions that are used in the workings of our 
objects that are not intended to be used elsewhere in our program.
    const FactoryFunction = string => {
        const capitalizeString = () => string.toUpperCase();
        const printString = () => console.log(`----${capitalizeString()}----`);
        return { printString };
    };
DO THINGS THIS WAY AS OFTEN AS POSSIBLE, CLEANER CODE, SMALLER FUNCTIONS
WHILE KEEPING THEM OUT OF THE WAY AND OUT OF SCOPE! NICE!

Everything publicly exposed can be changed from the outside

------> Inheritance w factory functions:

    const Person = (name) => {
        const sayName = () => console.log(`my name is ${name}`)
        return {sayName}
    }

    const Nerd = (name) => {
    // simply create a person and pull out the sayName function with destructuring assignment syntax!
        const {sayName} = Person(name)
        const doSomethingNerdy = () => console.log('nerd stuff')
        return {sayName, doSomethingNerdy}
    }

    const jeff = Nerd('jeff')

    jeff.sayName() //my name is jeff
    jeff.doSomethingNerdy() // nerd stuff

Or even assign all of the parent to the returned object:
    const Nerd = (name) => {
        const prototype = Person(name)
        const doSomethingNerdy = () => console.log('nerd stuff')
        return Object.assign({}, prototype, {doSomethingNerdy})
    }

------> CLASSICAL INHERITANCE VS PROTOTYPAL INHERITANCE
    Classical: In C++ and Java, inheritance is from a blueprint, not an instance
    Prototypal: In JS, inheritance is from an existing object, a delegate prototype.
    
    When you inherit from a delegate prototype, the new object gets a reference 
to the prototype. Properties are looked for up the prototype chain.
Method delegation can preserve memory resources because you only need 
one copy of each method to be shared by all instances. 

------> Module pattern:
Basically IIFE but for Factory Function: 
    var myModule = (function() {
    'use strict';

    return {
        publicMethod: function() {
        console.log('Hello World!');
        }
    };
    })();

    myModule.publicMethod(); // outputs 'Hello World'

-----------------------
        CLASSES 
-----------------------
Basically same as object constructor and prototype.
Pros:
Cons:
Difference w other languages:
Difference btw using class or other prototype method:
Getters and setters:
Computed names:
Class fields:
Function binding:
Inheritance w class:
Conflict in JS w functional prog and classes:  

    class User {

        constructor(name) {
            this.name = name;
        }

        sayHi() {
            alert(this.name);
        }
    }

    // Usage:
    let user = new User("John"); //new Bla() automatically calls the class constructor
    user.sayHi();

A class is actually a function.
It MUST be called with new.
We can't enumerate its methods.
    class MyClass {
        prop = value; // property

        constructor(...) { // constructor
            // ...
        }

        method(...) {} // method

        get something(...) {} // getter method
        set something(...) {} // setter method

        [Symbol.iterator]() {} // method with computed name (symbol here)
        // ...
    }

The static keyword defines a static method or property for a class. 7
Static members (properties and methods) are called without instantiating 
their class and cannot be called through a class instance. Useful for data
that we don't need duplicated in instances

------> Inheritance with 'extends'
    class Animal {
        constructor(name) {
         this.name = name;
        }

        speak() {
            console.log(`${this.name} makes a noise.`);
        }
    }

    class Dog extends Animal {
        constructor(name) {
            super(name); // call the super class constructor and pass in the name parameter
        }

        speak() {
            console.log(`${this.name} barks.`);
        }
    }

    let d = new Dog('Mitzie');
    d.speak(); // Mitzie barks.

To inherit from a class:
    class child extends parent {blabla}
    in child constructor, call super() //calls the parent constructor
    super.RandomParentMethod() // to call parent method
To inherit from an object:
    Object.setPrototypeOf(child.prototype, parent);

------> Mix-ins: abstract sub-class/template



---------------------------------------------------------

-----------------------
         NPM
-----------------------
Node Package Manager: to have access to plugins & libraries

https://npmjs.com/ lists packages
https://docs.npmjs.com/cli-documentation

Installing a package:
-> If your module depends on it, in the .js add
    var packageName = require('packageName');
-> To use one in the CLI, install it from the terminal, in the
project repo (a node_module dir will be created):
    npm install packageName

Alternative: installing with a package.json
create a package.json file:
  npm init //add -y to skip questions
  [fill in the required fields]
  npm install packageName --save //adds is to the json file
  npm install //to install all the modules from a json file

To customize the npm init questions:
    touch .npm-init.js
to add a custom question, in the file add the line:
    module.exports = prompt("what's your favorite flavor of ice cream, buddy?", "I LIKE THEM ALL");
to add a custom field to the json, in the file add the line:
    module.exports = {
        customField: 'Example custom field',
        otherCustomField: 'This example field is really cool'
    }

-----------------------
        WEBPACK
-----------------------
To bundle modules, have multiple js files 
in index.js:
    import myFunction from '.myFunctions.js';
in myFunction.js 
    export default function myFunction() {
        //
    }

create a webpack.config.js with
    const path = require('path');

    module.exports = {
        entry: './src/index.js', //our main js file
        output: {
            path: path.resolve(__dirname, 'dist'),
            filename: 'bundle.js', //the bundled output
        },
    };
in the html, the included script is bundle.js
    <script src="dist/bundle.js"></script>
Then run 'webpack' on the command-line to create bundle.js.

Generate simple configuration with question prompted
    npx webpack-cli init
For in depth conf, https://webpack.js.org/configuration/

/!\ IN package.json, add "private":true to not accidentally
publish your code

Separate src files from dist files: in src, the code which will be bundled.
In dist there will be the compiled code.

When installing a package that will be bundled into your production bundle, 
you should use npm install --save. 
If you're installing a package for development purposes (e.g. a linter, 
testing libraries, etc.) then you should use npm install --save-dev

To generate the bundle:
    npx webpack 
It generates a main.js file. So in our html we should use
main.js as script.

ESTELLE IF YOU'RE CONFUSED FOLLOW ALONG WITH
https://webpack.js.org/guides/getting-started/
https://webpack.js.org/guides/asset-management/
https://webpack.js.org/guides/output-management/

------> to import a CSS file 
    npm install --save-dev style-loader css-loader
Add module loaders to the webpack.config.js file
Webpack actually handles all the imports:  modules, other js files, fonts, images, css file,
data from JSON files... (no need to put them in the html anymore)

------> Debugging after bundling
https://webpack.js.org/guides/development/

To get proper referencig of error lines, In webpack config, add
    devtool: 'inline-source-map',
To automatically recompile upon modification, add to package.json scripts:
    "watch": "webpack --watch",

-----------------------
      ES6 MODULES
-----------------------

------> IMPORT:
    import "module";
    import "myFunction" from "myModule";
    import "myFuncrion" as "myFunctionsNickname" from "myModule"
    import {function1, function2} from "module"
/!\ Save resources!
    - only import what you need
    - do dynamic import (in conditions, or adding
    the await keyword)
        import('/modules/my-module.js')
            .then(module => {
                module.loadPageInto(main);
            })
            .catch(err => {
                main.textContent = err.message;
            });
    or
        let module = await import('/modules/my-module.js');

------> EXPORT:
    // Exporting individual features
    export let name1, name2, …, nameN; // also var, const
    export let name1 = …, name2 = …, …, nameN; // also var, const
    export function functionName(){...}
    export class ClassName {...}

    // Export list
    export { name1, name2, …, nameN };
    export { function1, function2, …, functionN };

------> DIVIDE YOUR CODE IN MODULES (= different thematic files)



------------------------------------------------------------------

-----------------------
     OOP PRINCIPLES
-----------------------
SOLID JS: 
    0) Single Responsibility Principle:
        A class/object/module should only have 1 responsability.
        Separate DOM manipulation from application logic.
      Avoid tightly coupled objects!
        An object should ultimately be able to stand alone,
        not depend on other objects.
        we should be able to start off writing our game using 
        primarily console.logs() and then add in a bunch of DOM 
        functions later without touching the game logic.
        Keep DOM functions in the main loop, don't interweave
        them in game functions, it's messy.
        To know what's 'one responsability', follow Object Role Stereotypes:
            - Information holder (hold infos, provides it to other objs)
            - Structurer (holds info about relationships btw objects)
            - Service provider (performs specific work on demand)
            - Controller (makes decisions to handle a task)
            - Coordinator (delegates work to other objs)
            - Interfacer (transforms info btw differents parts of the system)
        Once a function is written, DIVIDE IT AS MUCH AS POSSIBLE IN UNIQUE ACTIONS
    1) Open/Closed Principle
        If I have to open the JS file your module and make a modification 
        in order to extend it, you’ve failed the open closed principle.
        Add getters, setters, adders.
    2) Liskov Substitution Principle
        Don't put inheritance of object with mutually exclusive characteristics
    3) Interface Segregation Principle
        A module accessible for outside use shouldn't require other stuff to 
        be called beforehand. Other requirements should be optional.
    4) Dependency Inversion Principle
        Try not to call other objects methods IN a function. Rather,
        take the method as a parameter, this way you can switch with another
        method for testing and u don't depend on the object's implementation.

------> HOW TO AVOID TIGHTLY COUPLED MODULES: 
    https://medium.com/@alexcastrounis/how-to-write-highly-scalable-and-maintainable-javascript-coupling-c860787dbdd4
    - Use a mediator object. Other modules will only know about
    the mediator object, the mediator object checks and transfers info
    to the other modules (ie flight control tower).
    - Publish/Subscribe: a module updating a value calls the mediator's 
    'publish' method, an object needing to be updated on the value calls 'subscribe'.
    If the value is modified, the receiver is automatically notified



------------------------------------------------------------------

-----------------------
         JSON
-----------------------

convert JSON string to a proper JS object:
JSON.parse(/*some JSON string*/)

convert a JS object to a proper JSON string:
JSON.stringify(myObject)
JSON.stringify(myArray)

Useful for local storage:
    // Storing data:
    const myObj = {name: "John", age: 31, city: "New York"};
    const myJSON = JSON.stringify(myObj);
    localStorage.setItem("testJSON", myJSON);

    // Retrieving data:
    let text = localStorage.getItem("testJSON");
    let obj = JSON.parse(text);
    document.getElementById("demo").innerHTML = obj.name; 


------------------------------------------------------------------

-----------------------
        ASYNC
-----------------------
Callback: function passed to another function as argument
  For program not to wait for slow DL or UL or server request to execute.
    downloadPhoto('http://coolcats.com/cat.gif', handlePhoto)

    function handlePhoto (error, photo) {
    if (error) console.error('Download error!', error)
    else console.log('Download finished', photo)
    }

    console.log('Download started')
  1) Don't nest functions! Name them and declare them before calling them
  2) Separate functions in thematic files (=modules)
  3) Handle every error. Reserve the first param of the callback function for error.
  In function, check if error 
    var fs = require('fs')
    fs.readFile('/Does/not/exist', handleFile)
    function handleFile (error, file) {
    if (error) return console.error('Uhoh, there was an error', error)
    // otherwise, continue on and use `file` in your code
    }
/!\ CALLBACKS ARE DANGEROUS: how do we trust the called function to 
call the callback ? To only call it once ? 

Promises: 
    function getData() {
        return new Promise(function(resolve, reject) {
            let script = document.createElement('script');
            script.src = src;

            script.onload = () => resolve(script);
            script.onerror = () => reject(new Error(`Script load error for ${src}`));

            document.head.append(script);
        });
    }
    const myData = getData() // if this is refactored to return a Promise...

    myData.then(function(data){ // .then() tells it to wait until the promise is resolved
        const pieceOfData = data['whatever'] // and THEN run the function inside
    })

------------------------------------------------------------------

-----------------------
        API
-----------------------

Serves data.
You generally need an account one the service and request an API key before
making requests to an API.
fetch returns a promise!

    // URL (required), options (optional): WE NEED TO ADD MODE CORS TO ALLOW OUTSIDE SOURCES OR THE BROWSER WILL REFUSE
    fetch('https://url.com/some/url', {mode: 'cors'})
        .then(function(response) {
            // Successful response :)
    })
        .catch(function(err) {
            // Error :(
    });

http://api.openweathermap.org/data/2.5/weather?q=London&APPID=f4aa4eb90aa3aa36c5685d8da7a26dff

